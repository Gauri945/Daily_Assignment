/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {


      public ListNode merge(ListNode list1, ListNode list2) {
        
        ListNode dummy = new ListNode(10);
        ListNode temp=dummy;
        ListNode temp1=list1;  //head1
        ListNode temp2=list2;
       
       while(temp1!=null && temp2!=null){
          if(temp1.val<=temp2.val){
            temp.next=temp1;
            temp1=temp1.next;
            temp=temp.next;
          }
          else{
             temp.next=temp2;
            temp2=temp2.next;
            temp=temp.next;
          }

       }

          if(temp1==null){   //first node khtm ho gyi
            temp.next=temp2;
          }
          else{        //secn node khtm ho gyi ho
            temp.next=temp1;
          }
       

       return dummy.next;

       



    }




    public ListNode sortList(ListNode head) {
       if(head==null || head.next==null) return head;

       ListNode a =head;
        ListNode b =head;
         ListNode slow =head;
          ListNode fast =head;

          //divide the LL
          while(fast.next!=null && fast.next.next!=null){
            slow=slow.next;
            fast=fast.next.next;
          }
          b=slow.next;
          slow.next=null;
          a=sortList(a);
          b=sortList(b);

        ListNode ans = merge(a,b);
        return ans;

    }
}